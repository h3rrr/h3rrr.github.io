<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/03/13/cpp%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/03/13/cpp%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="cpp记录"><a href="#cpp记录" class="headerlink" title="cpp记录"></a>cpp记录</h1><blockquote><p>为自己的CPP的学习记录，因为是速成所以可能会存在错误的情况，可以重点看一下哪些知识点所需要（仅针对笔试）</p></blockquote><h2 id="cpp相关"><a href="#cpp相关" class="headerlink" title="cpp相关"></a>cpp相关</h2><p>记住，当类中的数据有指针的时候，不能隐式的转化，需要显式构造运算符重载，而且此时 成员为指针的，需要在操作的时候在堆上new一个新的地址，防止多个对象共同指向一个地址，例子如下： <strong>需要注意 new了之后在析构里面要delete</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">getLength</span><span class="params">( <span class="type">void</span> )</span></span>;</span><br><span class="line">      <span class="built_in">Line</span>( <span class="type">int</span> len );             <span class="comment">// 简单的构造函数</span></span><br><span class="line">      <span class="built_in">Line</span>( <span class="type">const</span> Line &amp;obj);      <span class="comment">// 拷贝构造函数</span></span><br><span class="line">      ~<span class="built_in">Line</span>();                     <span class="comment">// 析构函数</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">int</span> *ptr;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 成员函数定义，包括构造函数</span></span><br><span class="line">Line::<span class="built_in">Line</span>(<span class="type">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 为指针分配内存</span></span><br><span class="line">    ptr = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    *ptr = len;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Line::<span class="built_in">Line</span>(<span class="type">const</span> Line &amp;obj)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用拷贝构造函数并为指针 ptr 分配内存&quot;</span> &lt;&lt; endl;</span><br><span class="line">    ptr = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    *ptr = *obj.ptr; <span class="comment">// 拷贝值</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Line::~<span class="built_in">Line</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;释放内存&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Line::getLength</span><span class="params">( <span class="type">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *ptr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(Line obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;line 大小 : &quot;</span> &lt;&lt; obj.<span class="built_in">getLength</span>() &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 程序的主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="function">Line <span class="title">line1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">   Line line2 = line1; <span class="comment">// 这里也调用了拷贝构造函数</span></span><br><span class="line"> </span><br><span class="line">   <span class="built_in">display</span>(line1);</span><br><span class="line">   <span class="built_in">display</span>(line2);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量表达式要在一开始就定义，且不能被改变</p><p>在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。您不能仅通过返回类型的不同来重载函数。</p><p>注意，在运算符重载的时候，前缀++&#x2F;–和后缀的–&#x2F;++的区别，需要在后缀的重载的形参里面放一个int，让编译器知道上后缀 前缀要返回引用，后缀返回的是类</p><p>&gt;&gt;和&lt;&lt;的运算符重载 ，需要设置为友元     []的重载也需要返回引用   -&gt;的重载存疑，先放着</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;( ostream &amp;output,<span class="type">const</span> Distance &amp;D )</span><br><span class="line">      &#123; </span><br><span class="line">         output &lt;&lt; <span class="string">&quot;F : &quot;</span> &lt;&lt; D.feet &lt;&lt; <span class="string">&quot; I : &quot;</span> &lt;&lt; D.inches;</span><br><span class="line">         <span class="keyword">return</span> output;            </span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">friend</span> istream &amp;<span class="keyword">operator</span>&gt;&gt;( istream  &amp;input, Distance &amp;D )</span><br><span class="line">      &#123; </span><br><span class="line">         input &gt;&gt; D.feet &gt;&gt; D.inches;</span><br><span class="line">         <span class="keyword">return</span> input;            </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>在类中的静态成员，必须要在类外进行声明；静态成员函数只能访问静态成员（类中）和类外的元素，哪怕类没有被实例化，也可以通过：：来调用静态成员函数</p><p>const int size &#x3D; get_size(); 不能算啥常量表达式，因为只有当函数运行后返回值才可以确定其是不是常量</p><p>Constexpr int size &#x3D; get_size()； 就结局了这个问题</p><p>运算符的是自右向左，表达式是自左向右</p><p>&amp;&amp;与｜｜的短路性质 前者是false 后者为true</p><p>比较的优先度是 ！ &gt;   &amp;&amp;  &gt; ||</p><p>移位符 都是 value &lt;&lt; &#x2F; &gt;&gt; length</p><p>闰年可以被4整除 不能被100整除 &#x2F; 可以被400整除</p><p>表达式为 year % 4 &#x3D;&#x3D; 0 &amp;&amp; year % 100 !&#x3D; 0 || year &amp; 400 &#x3D;&#x3D; 0</p><p>Typedef 和 using 效果等同 typedef 已有 新名字    using 新名字 &#x3D; 已有</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">arctanx</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">1</span>, i = <span class="number">2</span>;</span><br><span class="line">    <span class="type">double</span> result = x / m;</span><br><span class="line">    <span class="keyword">while</span> (result &gt; <span class="number">1e-15</span>) &#123;</span><br><span class="line">        m += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            result -= (x * x) / m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += (x * x) / m;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> a = <span class="number">16.0</span> * <span class="built_in">arctanx</span>(<span class="number">1.0</span> / <span class="number">5.0</span>);</span><br><span class="line">    <span class="type">double</span> b = <span class="number">4.0</span> * <span class="built_in">arctanx</span>(<span class="number">1.0</span> / <span class="number">239.0</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;PI : &quot;</span> &lt;&lt; a - b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算PI 运行不出结果，但是感觉逻辑没问题</p><p>算回文通过颠倒 例如 123 变为 321</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">sys</span><span class="params">(<span class="type">unsigned</span> n)</span></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> i = n,m = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    m = m * <span class="number">10</span> + i % <span class="number">10</span>;</span><br><span class="line">    i /= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> m == n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmath库调用根号是sqrt函数 绝对值（double） fabs函数</p><p>cstdlib库调用随机种子 伪随机数  srand((unsigned)time(nulltpr)); sand() % n;</p><p>引用在定义的时候就要初始化 和常量表达式一样</p><p>注意函数传参 形参是不是引用</p><p>函数重载的区别主要是看参数</p><ul><li>参数的数量</li><li>参数的类型</li></ul><p>判断质数： 用sqrt</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(x&lt;=<span class="number">1</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(x);i++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(x%i==<span class="number">0</span>)</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求最大公约数&amp;最小公倍数 最小公倍数可以 x * y &#x2F; 最大公约数得到</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>   <span class="comment">//求最大公约数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="type">int</span> t;</span><br><span class="line">       <span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">              t=a;</span><br><span class="line">              a=b;</span><br><span class="line">              b=t;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">              t=a%b;</span><br><span class="line">              a=b;</span><br><span class="line">              b=t;</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>斐波那次数列 限制条件是n&gt;2</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">fib</span>(n<span class="number">-1</span>)+<span class="built_in">fib</span>(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移动构造函数，不是复制构造函数的深拷贝，相当于把一个对象的值移动到另外一边 节约内存</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">My</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">My</span>(<span class="type">const</span> My &amp;my); <span class="comment">//复制函数</span></span><br><span class="line"><span class="built_in">My</span>(My &amp;&amp; my);  <span class="comment">//两个引用 右值引用 直接移动  在使用的时候需要调用move，将左值引用换为右值引用</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>union联合体 相当于struct的一个变种，多个变量占有同一片空间，数据类型可以不一样，所以要保证明白数据的可用性</p><p>enum {} name1,name2;  &#x3D;&#x3D; enum name1 {}</p><p>常量成员函数的作用是 只看不改 return和读可以用到</p><p>默认形参 需要从右往左设置</p><p><strong>动态生存周期，static有全局的生命周期，并且只有第一次进入块中时初始化，再次进入则保留上一轮的值</strong></p><p>类中的静态成员函数和数据很重要</p><p>由整个类的所有对象共有 而非私有，static int a;   在类外  int A::a &#x3D; 0;</p><p>静态成员函数用于操作静态数据（因为静态成员函数可以不通过对象直接调用）</p><p><strong>但是静态函数也只能访问该类的静态数据 而不能直接调用类中的非静态数据</strong></p><p>想要实现则必须要用对象来调用</p><p>友元：可以定义在类内部，具体初始化在类外，可以访问类中任意元素</p><p>常引用才能调用常对象</p><p>汉诺塔的递归调用实现</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveTower</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> source, <span class="type">char</span> destination, <span class="type">char</span> auxiliary)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Move disk 1 from &quot;</span> &lt;&lt; source &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; destination &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">moveTower</span>(n - <span class="number">1</span>, source, auxiliary, destination);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Move disk &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; from &quot;</span> &lt;&lt; source &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; destination &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">moveTower</span>(n - <span class="number">1</span>, auxiliary, destination, source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> numDisks = <span class="number">3</span>; <span class="comment">// 汉诺塔的盘子数量</span></span><br><span class="line">    <span class="type">char</span> source = <span class="string">&#x27;A&#x27;</span>; <span class="comment">// 起始柱子</span></span><br><span class="line">    <span class="type">char</span> destination = <span class="string">&#x27;C&#x27;</span>; <span class="comment">// 目标柱子</span></span><br><span class="line">    <span class="type">char</span> auxiliary = <span class="string">&#x27;B&#x27;</span>; <span class="comment">// 辅助柱子</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">moveTower</span>(numDisks, source, destination, auxiliary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用extern调用外部变量</p><p>数组、容器的遍历，除了常见的迭代方法以外</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> &amp;a : b)&#123;</span><br><span class="line">  cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以带引用也可以不带引用</p><p>写直线的拟合</p><p>const 数据类型 *test 代表指向常量的指针，不能通过指针来改变值，但是指针可以指向不同的值</p><p>int * const p2 &#x3D; &amp;a, 此时无法改变 p2只能指向a</p><p>以指针作为参数，可以影响到实参；传入的实参可以为引用</p><p>数组指针型函数：int (*func(int i))[10]</p><p>要用int (*ptr)[i]来接</p><p>指向函数的指针 ： 返回类型 （*函数名字）（参数数据类型）</p><p>可以通过这个来调用函数</p><p>对象指针 例如</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Point *p;</span><br><span class="line">Point a;</span><br><span class="line">p = &amp;a;</span><br><span class="line"><span class="comment">//Point *p = &amp;a.    等同于上述内容</span></span><br></pre></td></tr></table></figure><p>在类的前向引用时，直接声明对象元素不行，但是可以通过指针</p><p>指向类的非静态成员函数指针&#x2F;指向的是成yuan</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> (*Point::func)(<span class="type">int</span>) = &amp;Point::getx;</span><br><span class="line"><span class="comment">//调用方法是</span></span><br><span class="line">(a.*func)(<span class="number">2</span>);</span><br><span class="line">(p1-&gt;*func)(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *ptr = &amp;Point::count;</span><br><span class="line">*ptr 调用</span><br></pre></td></tr></table></figure><p>string类狠狠滴看</p><p>类的继承时候调用的顺序</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:<span class="keyword">public</span> A,<span class="keyword">public</span> C,<span class="keyword">public</span> D&#123;</span><br><span class="line">  </span><br><span class="line">  ....</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  C c;</span><br><span class="line">  D d;</span><br><span class="line">  A a;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;;  </span><br><span class="line">调用顺序为 A -&gt; C -&gt; D -&gt;c -&gt; d -&gt; a</span><br></pre></td></tr></table></figure><p>使用using来继承基类的构造函数 using Base::Base;</p><p>同时在派生类中创造复制构造函数的时候也需要记得 B::B(const B&amp;b):A(b){…&#x2F;&#x2F;内写B的复制内容}，记得要先给基类传参</p><p>delete删除了构造函数，则其在派生类中也无法出现</p><p>解决由不同基类派生出来的派生类问题 <strong>为了解决二义性</strong> 1.通过：：确定 2. 使用using扩大作用域 3.确定虚基类 继承时候在方法前面加一个virtual</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">D d;</span><br><span class="line">d.Base1::var0; 以此来确定调用的是哪个</span><br></pre></td></tr></table></figure><p>运算符重载 分为了两种</p><ul><li>非成员函数 （设定为友元） 好处是可以直接调用类的对象，因为非成员函数想要调用private数据则需要通过函数来访问，无法通过对象来访问</li><li>成员函数 无须多言</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//特别是关于 &lt;&lt; 的重载</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span> &lt;&lt;(ostream &amp;out,<span class="type">const</span> C &amp;c)&#123;</span><br><span class="line">  out &lt;&lt; <span class="string">&quot;()&quot;</span>.........</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虚函数，说实话没太懂有啥用，基类声明一个virtual 后续可以一直重写</p><p>通过基类的指针可以随便调用，没搞懂  多态、动态绑定 哦只有基类的指针可以实现动绑</p><p>通过基类指针时候，调用delete时候，会出现错误 所以需要对析构函数也进行虚化</p><p>模版；</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;  <span class="comment">//模版函数 兼容性强</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  xxxx...</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  .......成员函数</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//但是模版类的成员函数需要</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">A&lt;T&gt;::<span class="built_in">A</span>():....&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> A&lt;T&gt;::<span class="built_in">getvalue</span>()&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明模版类的对象的时候也需要注意</span></span><br><span class="line">A&lt;T&gt; t; 就是这样</span><br></pre></td></tr></table></figure><p>用模版实现了动态数组，感觉很重要捏</p><p>深浅复制，看到类的复制函数的时候，如果传入的是数组的头指针的话，则需要new一片新的地址，实现深复制，不然调用析构函数的时候会出现问题</p><blockquote><p>比较有意思的一道题</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Object::func:a&quot;</span> &lt;&lt;a&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> :<span class="keyword">public</span> Object</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> b = <span class="number">20</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base ::fun:b &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Base base;</span><br><span class="line">Object* op = &amp;base;</span><br><span class="line">op-&gt;<span class="built_in">func</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后的结果是调用了Base的func，但是值为Object的默认参数</span></span><br></pre></td></tr></table></figure><p>多态的时候 注意删除指针 delete 和平时的～析构函数不一样 只触发了指针的析构</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Object</span>(<span class="type">int</span> x = <span class="number">0</span>) :<span class="built_in">value</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Create Object:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Object</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Destory Object:&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Object::add&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> :<span class="keyword">public</span> Object</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>(<span class="type">int</span> x = <span class="number">0</span>) :<span class="built_in">Object</span>(x + <span class="number">10</span>), <span class="built_in">num</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base Object:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Destory base:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base::add:&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Object* op = <span class="keyword">new</span> <span class="built_in">Base</span>(<span class="number">10</span>);</span><br><span class="line">op-&gt;<span class="built_in">add</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">delete</span> op;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Base的就没有析构了，所以需要给Object的析构上一个虚析构</p><p>这样就可以删除base的内存了，不会造成内存错误</p><h2 id="排序查找专题"><a href="#排序查找专题" class="headerlink" title="排序查找专题"></a>排序查找专题</h2><p>二分查找&amp;二分插入</p><blockquote><p>核心为 while循环 mid&#x3D;i+(j-i)&#x2F;2 插入返回的分为有重复元素和无重复元素 i 和 m 和 j &#x3D; m-1    在此的j是size-1</p></blockquote><p>选择排序</p><blockquote><p>核心为 swap 两个for循环镶嵌 外为[i,size-1]，内为[i+1,size]，内循环开头要用int min &#x3D; i</p><p>递归则需要在形参里面添加一个int index &#x3D; 0，其他同迭代一样</p></blockquote><p>冒泡排序</p><blockquote><p>循环镶嵌 外层是int i &#x3D; size -1，–i，内层为j &#x3D; 0开始到j &lt;i </p><p>优化是在内层循环之前利用bool flag &#x3D; false 若出现了交换，则flag &#x3D; true 在内层循环结束的时候利用flag判断，如果没有出现交换行为则 break</p><p>递归if（n &#x3D;&#x3D; 1） 循环条件为 n - 1 其他的和选择一样</p></blockquote><p>插入排序</p><blockquote><p>从第二个元素开始对比 在前面已经排序的序列中找到合适的位置插入 j + 1</p><p>for + while（j &gt;&#x3D; 0 &amp;&amp; a[j] &gt;base) 在for循环内要写明base存储a[i] j &#x3D; i - 1，在while循环内要不断后移a[j]</p><p>递归相同 但是要注意int last &#x3D; a[n-1] j &#x3D; n-2 </p></blockquote><p>快排</p><blockquote><p>通过两个核心函数实现的 一个是返回基准 一个是递归的排序函数 核心是参数的left和right 作为i，j指针</p><p>int函数利用while循环镶嵌 在途中交换 结束后交换基准</p><p>void排序函数 通过递归调用 可以用方法优化</p></blockquote><p>归并排序</p><blockquote><p>也是通过两个核心函数实现的 一个是数组的合并函数 参数为left mid right 左数组为[left,mid] 右数组为[mid+1,right]</p><p>创造一个临时数组temp，将两个数组的内容进行比较再放在temp中，核心是temp[k++]这样的式子 最后将合并的内容放回到原数组中</p><p>递归函数进行递归，对左右数组进行归并，再合并</p></blockquote><h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h2><p>下面这个的进制转化很有意思 要记住</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">transform</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;0&quot;</span>); <span class="comment">// 设空</span></span><br><span class="line"><span class="keyword">while</span>(num != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> d = num % <span class="number">16</span>;</span><br><span class="line"><span class="keyword">if</span>(d &lt; <span class="number">10</span>)&#123; <span class="comment">// 设空</span></span><br><span class="line">s = <span class="built_in">char</span>(d + <span class="string">&#x27;0&#x27;</span>) + s;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">d -= <span class="number">10</span>; <span class="comment">// 空</span></span><br><span class="line">s = <span class="built_in">char</span>(d + <span class="string">&#x27;A&#x27;</span>) + s;</span><br><span class="line">&#125;</span><br><span class="line">num /= <span class="number">16</span>; <span class="comment">// 空</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">transform</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> d = num % <span class="number">8</span>;</span><br><span class="line">        s = <span class="built_in">char</span>(d + <span class="string">&#x27;0&#x27;</span>) + s;</span><br><span class="line">        num /= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>十六进制因为又有数字又有字符的存在，所以在num%16后，判断是否大于10，小于10的就用 d+’0’转化为数字 大于10的用其减去10，利用‘A’来完成字符的转换，但是记得都需要在s的前面加入。八进制同理</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initializationArr</span><span class="params">(<span class="type">int</span>**&amp; tri, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        tri[i] = <span class="keyword">new</span> <span class="type">int</span>[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> m;</span><br><span class="line">            std::cin &gt;&gt; m;</span><br><span class="line">            tri[i][j] = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solveMin</span><span class="params">(<span class="type">int</span> **tri,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>,sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> fl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        fl = tri[i][flag];</span><br><span class="line">        sum += fl;</span><br><span class="line">        std::cout &lt;&lt; fl &lt;&lt; <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == n - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tri[i+<span class="number">1</span>][flag] &lt; tri[i+<span class="number">1</span>][flag+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n最小路径为&quot;</span>&lt;&lt; sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;输入想要多少层: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span>** tri = <span class="keyword">new</span> <span class="type">int</span>* [n];</span><br><span class="line">    <span class="built_in">initializationArr</span>(tri, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            std::cout &lt;&lt; tri[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solveMin</span>(tri,n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放动态分配的内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] tri[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] tri;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数字金色塔问题，要求用递归和迭代两种方法写，听说要用动态规划，直接暴力解吧！</p><p>最核心的二维动态数组的建立，你们有这样的二维数组吗！</p><p>下面的是通过递归写的，还在参悟递归中</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">recursiveInitializationArr</span><span class="params">(<span class="type">int</span>**&amp; tri, <span class="type">int</span> n, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &lt;= i) &#123;</span><br><span class="line">            <span class="type">int</span> m;</span><br><span class="line">            std::cin &gt;&gt; m;</span><br><span class="line">            tri[i][j] = m;</span><br><span class="line">            <span class="built_in">recursiveInitializationArr</span>(tri, n, i, j + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tri[i] = <span class="keyword">new</span> <span class="type">int</span>[i + <span class="number">1</span>];</span><br><span class="line">            <span class="built_in">recursiveInitializationArr</span>(tri, n, i + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initializationArr</span><span class="params">(<span class="type">int</span>**&amp; tri, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建二维数组</span></span><br><span class="line">    tri = <span class="keyword">new</span> <span class="type">int</span>*[n];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">recursiveInitializationArr</span>(tri, n, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solveMinRecursive</span><span class="params">(<span class="type">int</span>** tri, <span class="type">int</span> n, <span class="type">int</span> row, <span class="type">int</span> col)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 递归终止条件：到达三角形底部</span></span><br><span class="line">    <span class="keyword">if</span> (row == n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tri[row][col];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 向下递归</span></span><br><span class="line">    <span class="type">int</span> leftSum = <span class="built_in">solveMinRecursive</span>(tri, n, row + <span class="number">1</span>, col);</span><br><span class="line">    <span class="type">int</span> rightSum = <span class="built_in">solveMinRecursive</span>(tri, n, row + <span class="number">1</span>, col + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回较小的路径和</span></span><br><span class="line">    <span class="keyword">return</span> tri[row][col] + std::<span class="built_in">min</span>(leftSum, rightSum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solveMin</span><span class="params">(<span class="type">int</span>** tri, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> minSum = <span class="built_in">solveMinRecursive</span>(tri, n, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;最小路径为&quot;</span> &lt;&lt; minSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;输入想要多少层: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span>** tri = <span class="keyword">new</span> <span class="type">int</span>* [n];</span><br><span class="line">    <span class="built_in">initializationArr</span>(tri, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            std::cout &lt;&lt; tri[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solveMin</span>(tri,n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放动态分配的内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] tri[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] tri;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很抽象，在private中声明了其他的类为成员数据，则先调用其的构造函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;A&#x27;s constructor&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;A&#x27;s destructor&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;B&#x27;s constructor&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;B&#x27;s destructor&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串数字想要转为数字 需要 减去字符<strong>‘0’</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如梦似幻</title>
      <link href="/2024/03/10/%E2%80%9C%E5%A6%82%E6%A2%A6%E4%BC%BC%E5%B9%BB%E2%80%9D/"/>
      <url>/2024/03/10/%E2%80%9C%E5%A6%82%E6%A2%A6%E4%BC%BC%E5%B9%BB%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="“如梦似幻”"><a href="#“如梦似幻”" class="headerlink" title="“如梦似幻”"></a>“如梦似幻”</h1><blockquote><p>写于备考复试途中</p></blockquote><p>最近准备好好经营一下博客，主要是记录一下每一个阶段的心态。</p><p>一开始准备等一切结束后再来写，但是实在学不下去了，提前写一篇记录一下备考过程中的痛苦。</p><p>2.26出分，只有那一天是快乐的，后面就陷入了无限的焦虑中。</p><p>一开始的想法是能上300就算成功，至少让自己面子上好看一点，最后出的成绩其实和寒假自己估的其实一模一样。</p><p>怎么说呢，刚开始看到排名的时候还是很亢奋的，感觉从濒死状态拉起来了一样，此前已经在准备调剂&amp;春招了，结果又好像擦线进复试了。</p><p>就像世界不想让我彻底失望一样，每次当我对某件事抱有期待的时候，它就是不会发生；当我对某件事绝望的时候，它又碰巧发生，让你心情反反复复的。</p><p>从0开始学cpp，说实话，根本学不进去。一开始把菜鸟过了一遍，又感觉不够，去把c++ primer看了一遍，看了一大半感觉太繁琐了，又跑去看郑莉的课程和书。</p><p>现在也算是模模糊糊能做些题了，但是考试没有划出范围，所以我就不知道哪些该看哪些不该看，怕浪费时间也怕冷门被考到了。感觉比初试前更焦虑和内耗。</p><p>今年专硕爆冷了，学硕炸了。很庆幸在报名那一刻我没头铁去报学硕，不然可能去看一眼学校的资格都没有。现在虽然焦虑但是好歹有机会去看一眼学校。</p><p>说到底，这段时间挺痛苦的，比绝望更难受的就是在悬崖边缘，也许是我心态真的不行吧，得知报考院校的院长在课上说今年可能以我的成绩为线或者比我成绩高一些的成绩为线的时候就很焦虑。总在想是不是会过不了线，总在想我这成绩去不就是走个过场嘛，总在算我要复试多拿多少分才可以实现逆风翻盘….</p><p>身边的朋友都在安慰我，说我机会很大，其实我也知道大概率就是去陪跑…</p><p>人就是一种很难满足的动物啊，在一开始期待的是一个能让大家面子都能过得去的成绩；后面发现按照去年的划线已经进复试的时候欣喜若狂；再到知道今年可能专硕缩招给学硕的沮丧和内耗…</p><p>有时候我发呆的时候就在想，我和350+其实也就差了当时那道改错的或者粗心的选择题+数学大题的第一道，并不遥远，但是从排名上来看差了差不多近百人。</p><p>我也知道这样想毫无意义，努力备战复试才是最重要的事情。可是懂归懂，真的代入到自己身上的时候很难做到。不过也可能是我自己心态不行吧。</p><p>同样考研的朋友们大多情况都不错，一个400+的哥，几个985高分哥…感觉和大家比起来，低分仔都没资格狗叫了。</p><p>前几天去电信面试，面试官问我为什么选择找工作而不是去读研，我当时回答说「不想读了，想早点工作」，然后几个面试官都在劝我如果能读还是读下去。</p><p>我当然也知道呀，可是我真的一点希望都看不到，唉。</p><p>初试考完了被数学折磨，成绩出了后被能不能进复试折磨。</p><p>真的累了，如果说之前还有二战的打算，现在真的很难做到了。</p><p>对未来很迷茫，好像无论结果是啥都是一团迷雾，根据因果定律的话，我的结局要么是复试狠狠滴被刷下来，要么就是连复试都进不去了吧。</p><p>所以学会了降低自己的预期</p><p>还是希望能去看一眼学校，至少也为此奋斗过一年，都说开花结果，哪怕最后结果是bad end也期望能参与。</p><p>想最后在南京的莫愁路上等着结果。</p><p>无论好坏，最后都莫愁莫愁。</p><p>希望命运给我一次参与的机会吧，好坏我都认了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于考研这一年</title>
      <link href="/2024/01/19/%E5%85%B3%E4%BA%8E%E8%80%83%E7%A0%94%E8%BF%99%E4%B8%80%E5%B9%B4/"/>
      <url>/2024/01/19/%E5%85%B3%E4%BA%8E%E8%80%83%E7%A0%94%E8%BF%99%E4%B8%80%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本来准备等成绩出来之后，等一切尘埃落定后再来写这一年的回顾。但是最近心情不是很好，有一些东西不吐不快，所以我决定提早写完这一篇年度总结。</p><p>全文都是我自己的经历和感受，希望能对后来者有借鉴的作用</p><p>同时也是一种对自己的提醒以及对这一年的记录。</p></blockquote><h2 id="0-为什么要考研"><a href="#0-为什么要考研" class="headerlink" title="0.为什么要考研"></a>0.为什么要考研</h2><p>作为一个比较边缘的web手，大学三年实在学习的东西有限，自认不是很勤奋也没那么拉胯。当然离我的学长学姐们还是很有差距的，当时大家都很迷茫，和我同期的队友们一个去小红书实习，一个去安恒实习，还有一个准备去美国读书。</p><p>我那个时候十分的纠结到底是考研还是直接工作，好好准备一年还是能找到一个『工作』，但是感觉并不太可能去一个很好的公司，而且多半是当安服仔。</p><p>我对这样的未来很失望，但是又没办法。</p><p>再三考虑后我决定去考研。不仅仅是对高学历的渴望，而且还想为自己留一点退路。</p><blockquote><p>从今年的情况来看，早点工作肯定是有好处的，积累三年的工作经验比一个研究生学历有用多了，我们都得承认学历贬值的事实</p></blockquote><p>抱着不撞破南墙不回头的信念，我坚定的放弃了一些机会，果断的选择了考研，当时想着：如果能一战上岸985硕，我觉得一切都是值得的</p><h2 id="1-考研这一年"><a href="#1-考研这一年" class="headerlink" title="1.考研这一年"></a>1.考研这一年</h2><p>从2023年3月正式准备考研开始，我度过了一个漫长又转瞬即逝的一年。</p><h3 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h3><p>因为过年的时候就在知乎上看一些经验帖，不敢说百分百懂哥，但是那时候我已经知道第一步如何踏出了。</p><p>在经过一些尝试和比对之后，我选择用<strong>张宇的基础30讲</strong>来打基础，很幸运也很失败，幸运的是张宇30讲确实很好，失败的是我把1000题也做了…</p><p>那段时间基本上就是数学+英语的学习，因为很久没学习了，一开始是一天3-4小时的学习时间，再慢慢的目标定到5小时。终于在1000题高数部分的选择题做完之后，一天可以学到6小时了。</p><p>那段时间只学了高数部分，每天背320个单词（复习＋新词）  可惜方法并没有掌握好，当时虽然做完了1000题的高数部分，但是实际上还是有点云里雾里的，哪怕我把辅导讲义的习题做了两遍，在做1000题的部分题还是很恍惚，做到级数的时候我甚至一度认为自己没有读书的天赋。当时基本上做几道题就卡住开始看答案。<em>事后才知道，原来1000题是强化的时候做的练习题，我被知乎上的「1000打基础」给骗了</em></p><p>很绝望，感觉距离自己定的目标很遥远，似乎一开始做考研的决定就是错误的，我开始打退堂鼓，那段时间恰好有一个机会可以直接去工作，不仅工资很高，条件也很好。犹豫再三，拒绝了，又开始拿起高数书开始啃….又开始做起了武忠祥老师的660题的高数部分。</p><p>那个时候也就4月5月，焦虑还没追上我，我还在慢悠悠的学。</p><p>为了摆脱高数上的困境，我开始了计网的学习。对比起高数来，计网更像是高中的生物一样，纯粹就是看你的记忆和理解。我推荐打基础用湖科大教书匠的网课+王道408计网的辅导书，比王道的课程好很多（自认为），做完了王道计网的选择题。</p><p>就这样慢悠悠学到六月，我开摆了。</p><p>就像学不动了一样，那段时间一点书都不想看，我开始看剑来，看了半个月的时间就开始准备期末考试，六月就这样过去了。</p><h3 id="强化篇"><a href="#强化篇" class="headerlink" title="强化篇"></a>强化篇</h3><p>7月的时候我突然意识到应该开始学习了，我看了很多前辈的经验贴，大家都说暑假是最重要的时候，那个时候我还在犹犹豫豫是开强化还是继续巩固基础。因为1000题的难度带给我的压力，我认为我基础还不是很牢，高中老师那句『基础不牢，地动山摇』没在我高中学习的时候鼓动我，反而在我大学时期发挥了作用。</p><p>很幸运的是在加的考研群里面看到了邂逅哥的贴子，让我放弃了继续巩固基础的想法，并且按照邂逅哥的思路开始学习。<em>感兴趣的可以直接去知乎搜索邂逅遗憾，是一篇很很很好的经验帖。</em></p><p>现在记忆里面最深刻的一句话的大抵意思是『基础很重要，但是当你开始强化，你的数学世界才开始有翻天覆地的变化』</p><p>跟着一个有经验的前辈的思路学习，会少走很多弯路。我跟着邂逅哥的脚步开始看武的强化课，只能说武老师对高数的理解很到位，不同于张宇给你传授 <strong>方法和理论</strong>，武老师传授的 <strong>数学思维</strong>是成为高手必备的武器。这个时间我开始发现很多以前想不通的题现在迎刃而解。我开始做武的严选题。</p><p>英语上除了继续背单词以外，每一天开始做一篇到两篇的阅读。</p><p>这段时间是最充实的时候，虽然有一些焦虑，但是不断的学习到新的东西，能明显的感觉到自己的蜕变，我还是很开心的。</p><p>8月，开启了数据结构的网课，花了一个月多的时间把网课看完了，做完了天勤的选择题部分。</p><p>莫名其妙就到了9月，开学。</p><p>那段时间焦虑极了，又是开学上课又是同行哥的压力。开始怀疑自己到底能不能一战上岸，而且室友也经常压力我。让我开始渐渐处于一种很焦虑的状态。</p><p>一开始学习的计网又忘了，我又只能从头开始看起，啃一本厚厚的谢书。</p><p>就这样在焦虑和麻木中，我做完了李林880的高数部分，做完了王道的数据结构选择题….</p><p>10月，还未开始的线代和概率论加剧了我的焦虑。</p><p>我也不是没想过早点开始，但是一开始看线代真的看不进去，无论是基础还是强化，看了一点就不想看了，就只能作罢，一直拖延到10月，我意识到真的得开始学了，不然还没开始考试就得宣告死刑了。</p><p>开始看线代和概率论，一边看网课一边做题。线代不断的换老师延长了学习时间，概率论直接开始看方浩的强化课，学的倒挺快的。</p><p>跌跌撞撞的用一个月的时间把李林880的概率论部分做完了，又开始做张宇的线代讲义。</p><p>这段时间高数基本上处于一种搁置的状态，政治也没学，英语在看了几节唐迟的阅读课后醍醐灌顶，开始往好的方向发展。</p><p>总的来说，就是混乱。</p><h3 id="冲刺篇"><a href="#冲刺篇" class="headerlink" title="冲刺篇"></a>冲刺篇</h3><p>11月的开篇，让我更焦虑了。</p><p>我开始强迫自己早起，每天一定要学8-9小时，开始补足之前缺掉的部分。</p><p>政治直接开始速通，一天一大章看肖的背诵手册。英语开始做小三门，偶尔写篇阅读。数学终于可以完整的做一套卷子了，直接开始套卷。专业课直接把课本和习题都重新做一遍。</p><p>11月是最充实的一集，也是最极限的一集。背肖八，拿手机小程序做完肖1000。数学跟着蝗虫哥的进度做了李永乐的卷子，张宇八套卷，李林八套卷，真题全部。那段时间真的是一天一套卷子，做完一个人的卷子就开始整理错题。专业课上，我直接开始刷题，芝士刷题那个小程序，一天做400道选择题，毕竟自选题就是这样，你只要遇见过就肯定会做，没遇见过再怎么都做不出来。</p><p>12月，整个人的状态都趋于一种躺平的心态，我又开始看小说，但是每天固定还是会学8-9小时，但是能明显感觉精神状态很恍惚。很多时候做题都是靠着本能来做，经常容易走神。和暑假的状态比差太多了。</p><p>专业课就不停的刷题，刷刷刷，408考试卷子，往年卷子全都做。到后面考试的时候，基本上王道书上的选择题都快背下来了。</p><p>数学经常走神，又复盘了一次11月做的卷子，开始做李林4套卷。</p><p>肖四拿到手后光把选择题做了，背材料实在太痛苦了。到后面实在不得不开始背的时候才开始背，翻来覆去就是背肖四和肖八。</p><p>英语作文写的也很折磨，因为英语基础很差，放弃了小三门，从偶尔做一下到直接开摆不做小三门。</p><p>当时对一战上岸挺有信心的….但是又清晰的知道自己状态很差，对于上岸是一种迷迷糊糊的感觉。</p><p>那段时间真题模拟也有120 130的，李林4+8做的也还不错，120 130 甚至有一两张140让我陷入了一种很疯狂的状态。 那就是数学一定要拿多少多少分这种想法。</p><h3 id="考试那两天"><a href="#考试那两天" class="headerlink" title="考试那两天"></a>考试那两天</h3><p>就这样熬到了考试那两天。第一天心态很放平，除了英语作文打了个措手不及，导致后面时间不够乱蒙了两篇阅读和一篇完型。最后结果也还好，至少不是很惨。</p><p>但是第二天，数学直接给哥们来了一个重拳出击。</p><p>做完选填差不多40多分钟，想着空着的两三道题后面再来做，结果第一道大题直接给哥们整不会了。考前两天一直在背政治和英语作文，数学基本上一道题都没做过，也就第一天考完的晚上把错题了一遍。所以直接陷入一个固定思维的误区里面没走出来，结果给哥们整破防了，前一段时间那种病态的思维在这个时候就出现了，由于选择题和填空题不是很难，当时就认定自己一定可以考到多少多少分，结果第一道大题没做出来….</p><p>这个时候就开始走神了，脑子里面各种各样的东西都一闪而过，跟tm跑马灯一样，到后面直接开摆了，大题直接把过程写上去之后就开始发呆…计算结果也没算…</p><p>当时想着既然已经不能考到很高的分数，那就算了吧….最后打铃，走出考场的那个时候，又想出来大题怎么做的了。</p><p>就像命运给我开的玩笑一样，在数学上投入的最多最后却收获了这样的结果，开始崩溃。一度不想参加下午的专业课考试，最后还是咬着牙去考完了专业课。</p><h2 id="2-一些感想"><a href="#2-一些感想" class="headerlink" title="2.一些感想"></a>2.一些感想</h2><p>走出考场的时候，一阵恍惚。那两天天气很好，朋友们约着考完了下山吃火锅。我和朋友走在路上，听着他们欢声笑语，心里面有些惆怅…</p><p>一度以为自己可以一战上岸，最后却成为了一个笑话。</p><p>吃完火锅，我去大学城找了在重大读书的朋友，不停的喝酒，最后在酒桌附近的垃圾桶哇哇的吐，边吐边流眼泪。我把准考证丢在了那个垃圾桶里面，想着自己这一年都白费了，这个时候朋友的成功就十分的耀眼。没有嫉妒，只是悔恨自己太菜了，没有足够的才能支撑起自己的决心。</p><p>说实话，考研很累。真的真的很累，不仅仅是备考学习知识很累，在这过程中心态的调整是最内耗的。感觉考研就像是一场修行，修心为主修力为辅。</p><p>你真的有决心能翻山越岭从万人之中脱颖而出吗？你的才能真的能支撑你的想法，带着你翻山越岭吗？</p><p>高考还真是最具有筛选性质的一场考试，天赋的高低直接给你区分出来。</p><p>2020我就被一脚踢出来，2024我依旧被一脚踢出来了…</p><p>什么以前没有努力或者以前不会学习，难道之前没有做到的时候大学了真的就会有改变吗？</p><p>我没有坚持干一件事情的毅力…至少我现在没有，后面我的好学弟说我因为自己的考研失利而开始否定很多东西。我不否认确实有点这种想法，因为我自己是这样走过来的，我看到自己的下场和我一起走的人都是什么下场….</p><p>那段时间对于考研或者以后的人生未来，有了一种很不一样的看法，12月之前，我十分的坚定的认为考研就是正确的。12月到现在，我开始怀疑这到底是否真的正确。</p><p>只能说人生有很多选择，当我拒绝一些可能的时候，就只有脚下的这一条路可走，那么继续走下去，失败了也无所谓，考研也就是一个过程，大不了二战！不一定每一个选择都趋于正确答案，但是要最后问心无愧。我不后悔当时选择了考研，虽然现在有点痛苦，但是也收获了很多不一样的东西，塞翁失马焉知非福嘛</p><p>路漫漫其修远兮，希望每一个后来的道友都能坚持下去，大道就在脚下。</p><h2 id="3-一些建议"><a href="#3-一些建议" class="headerlink" title="3.一些建议"></a>3.一些建议</h2><h3 id="关于留学"><a href="#关于留学" class="headerlink" title="关于留学"></a>关于留学</h3><p>我自己就是国际学院的，身边也有不少出去留学的人。我自己的观点是，如果你出去留学不是为了润或者为了追求学术，那么留学完全没必要。如果抱着留完学回来找工作的想法，我只能说时代已经变了，已经不是留学海归都是人上人的版本了，大家都知道你留学的含金量有多少。当然如果家里有钱，是富哥们那完全没问题，富哥们开心就行。</p><p>但是如果家庭没那么富，自己只是对未来迷茫想选择一条轻松的路的话，我感觉没太大的必要。如果你现在都找不到工作，很难想象留学后能找到工作或者找到的工作和你出国爆的大米不成正比。</p><h3 id="关于找工作"><a href="#关于找工作" class="headerlink" title="关于找工作"></a>关于找工作</h3><p>时代变惹，我一直听说一个观点就是环境会越来越难，在这种情况下互联网其实都不是很吃香了（赛博土木罢了），早点找个班上确实挺好的，因为你就算一战上岸后读完书出来可能也不一定能找到比现在更好的工作了…但是你还可能白白浪费三年的时间去拿一个学历<em>（当然学历上升两个档次的是例外）</em></p><p>无论是考编还是进厂，先占一个坑位肯定是没问题的选择，至于未来？大家也都不知道会怎么样。</p><h3 id="关于考研"><a href="#关于考研" class="headerlink" title="关于考研"></a>关于考研</h3><p>我建议考研择校上选择比自己本科学校档次高两档的学校，然后从中挑选自己喜欢或者想考的。不然学历贬值的情况下你读研是没必要的。</p><p>等你读完研出来之后，可能情况会更难，你竞争的不仅仅有本科的技术哥还有9本9硕爷，压力一样很大。</p><p><em>尽量避免选择京区等英语、政治压分地区的高校，如果你本身英语和政治都不是特别好的情况，能不能拿到平均分都是需要考虑的事情，因为旱区的60说不定在水区就是70，考的学校并不会因为是不是旱区而降低分数。</em></p><h2 id="4-备考的安排-amp-资源"><a href="#4-备考的安排-amp-资源" class="headerlink" title="4.备考的安排&amp;资源"></a>4.备考的安排&amp;资源</h2><p>以下是我自己尝试过的搭配，基本上没推荐到的但是是主流的就说明我做过但是感觉没必要（时间安排看自己）</p><table><thead><tr><th></th><th>基础阶段</th><th>强化阶段</th><th>冲刺阶段</th></tr></thead><tbody><tr><td>数学</td><td>张宇基础30讲的高数部分以及张宇30讲的讲义＋武的660高数部分</td><td>高数：武的强化课加严选题 ；线代：直接看张宇的线代强化加辅导讲义；概率论：直接看方浩的强化课＋李林的概率论辅导讲义。李林880全部都做完，108没必要全做，可以针对性做一些</td><td>真题推荐李艳芳老师的卷子，从2000开始做就行；模拟卷推荐张宇八套卷+李林八套卷+李林四套卷，多的没必要做。做好整理归纳就行</td></tr><tr><td>英语</td><td>背单词</td><td>背单词+做阅读+小三门</td><td>作文直接被monkey的模板，不需要看课也不需要自己总结，拿一个平均分就行</td></tr><tr><td>政治</td><td>无</td><td>无</td><td>直接背肖四肖八就行，有时间做一下其他老师的模拟卷的选择题</td></tr><tr><td>专业课</td><td>计网：湖科大网课+王道辅导书；数据结构：王道网课+天勤（基础差的话）&#x2F;王道辅导书（基础好）</td><td>王道辅导书＋芝士考研小程序</td><td>408历年卷子+真题</td></tr></tbody></table><p><em>数学部分的提醒：级数强烈建议直接开始看方浩的强化部分，基础的时候不需要学习级数；三重积分、曲线曲面建议看张宇的强化辅导讲义，讲得很好很好</em></p><p><em>关于学习时长：我建议按照自己的进度来，一天内该完成多少就是多少，以学到东西为目的而不是一昧的堆时间</em></p><p><em>当然这并不是说你可以懈怠，在认真的情况下我建议每天从6小时开始不断累计到10小时。</em></p><p><em>很多985本爷备考的时间短、日常学习时间短是因为人家确实有天赋</em></p><p><em>在你没有天赋的情况下，堆时间是有用的，前提是能学到东西</em></p><p><em>关注学习效率是很有必要的，但是不能把学习效率作为不努力的借口</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始</title>
      <link href="/2022/07/20/%E5%BC%80%E5%A7%8B/"/>
      <url>/2022/07/20/%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来一开始是用的LNMP+Wordpress搭建的一个博客</p><p>使用的是Sakura主题，一开始还觉得很能够用，Sakura主题也比较的花里胡哨的。但是时间长了有一些弊端。</p><ul><li>wordpress对于更新文章并不是很友好，hexo更适合我一点</li><li>本质上是更喜欢偏向简约风格的博客的，一开始Wordpress丰富的功能迷惑了我的双眼，后面还是发现hexo简约的风格更得到我的偏爱</li><li>Wordpress需要服务器，虽然有服务器，但是能白嫖github搭建博客也是极为不错的</li><li>已经搭建了wordpress+lnmp，想再试一下搭建hexo的博客</li></ul><p><strong>综上所述</strong>，最后选择了搭建这个hexo博客，也会尽量在之后多多更新，全栈爷清水说过一句话：<mark class="hl-label blue">文章才是博客的重中之重，花里胡哨的失去了博客的本意</mark> </p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在此为了方便其他人对butterfly进行魔改，所以将我魔改的步骤放在了这里供大家参考，当然我魔改的步骤也是参考的网上大佬们的博客</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>为了<mark class="hl-label pink">简约</mark> ，在这里去掉了一开始的首页图和页脚</p><p><img src="https://test-1303933256.cos.ap-chongqing.myqcloud.com/%E5%9B%BE%E5%BA%8A/image-20220720161011473.png" alt="image-20220720161011473"></p><p>直接在butterfly的配置文件中修改 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disable_top_img: true</span><br></pre></td></tr></table></figure><p>这样就可以将首页图去掉了</p><p>然后参考<a href="https://www.antmoe.com/posts/7198453/">小康的博客</a>就可以实现和本博客一样的背景了</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>字体的修改参考<a href="https://yanchengxu.top/hexo-font-modification/#%E5%88%9B%E5%BB%BAcss/">这个博客</a>然后就可以成功的修改博客的字体了</p><h3 id="光标样式"><a href="#光标样式" class="headerlink" title="光标样式"></a>光标样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur</span>),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur</span>),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面的代码，粘贴到一个引用的css文件中就可以得到和我的博客一样的光标</p><h3 id="图标的改变"><a href="#图标的改变" class="headerlink" title="图标的改变"></a>图标的改变</h3><p>想要达到类似于<img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20220720163407244.png" alt="image-20220720163407244"></p><p>一样的效果，那么就可以在阿里云的图标库里面找到自己喜欢的，然后在配置文件中引用就可以了</p><h3 id="右侧滚动条"><a href="#右侧滚动条" class="headerlink" title="右侧滚动条"></a>右侧滚动条</h3><p>复制下面的代码到css文件里面，再引用</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/* 滚动条 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ::-webkit-scrollbar-track &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">73</span>, <span class="number">177</span>, <span class="number">245</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">      <span class="number">45deg</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">25%</span>,</span><br><span class="line">      transparent <span class="number">25%</span>,</span><br><span class="line">      transparent <span class="number">50%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">75%</span>,</span><br><span class="line">      transparent <span class="number">75%</span>,</span><br><span class="line">      transparent</span><br><span class="line">    );</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ::-webkit-scrollbar-corner &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ::-moz-selection &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>差不多的修改就这些，还有一些细枝末节的修改已经忘了，但是这样也差不多能够用了，毕竟 <strong>简洁</strong> 才是博客的中心，一些花里胡哨的东西还需要自己去挖掘</p><blockquote><p>以后如果对博客进行了修改也会更新在这上面的</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
